"use client"

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ChevronDown, ChevronUp, ExternalLink } from "lucide-react"
import { useState } from "react"

const vulnerabilities = [
  {
    id: "v1",
    name: "Prompt Injection Vulnerability",
    tool: "Content Generation",
    severity: "Critical",
    category: "Tool Poisoning",
    description:
      "The Content Generation tool is vulnerable to prompt injection attacks, allowing attackers to manipulate the tool to generate unauthorized content or execute unintended actions.",
    testCase: "Test-123",
    status: "Open",
  },
  {
    id: "v2",
    name: "Authentication Parameter Bypass",
    tool: "User Authentication",
    severity: "High",
    category: "Parameter Injection",
    description:
      "The User Authentication tool accepts manipulated parameters that can bypass authentication checks, potentially allowing unauthorized access to protected resources.",
    testCase: "Test-456",
    status: "Open",
  },
  {
    id: "v3",
    name: "Context Data Leakage",
    tool: "Data Retrieval",
    severity: "Medium",
    category: "Context Leakage",
    description:
      "The Data Retrieval tool exposes sensitive context information in error responses, potentially revealing internal implementation details or confidential data.",
    testCase: "Test-789",
    status: "Open",
  },
  {
    id: "v4",
    name: "Cross-Tool Command Execution",
    tool: "Search Function",
    severity: "High",
    category: "Cross-Tool Manipulation",
    description:
      "The Search Function tool can be manipulated to execute commands in other tools, potentially allowing attackers to bypass security controls or access unauthorized functionality.",
    testCase: "Test-101",
    status: "Open",
  },
  {
    id: "v5",
    name: "Insufficient Input Validation",
    tool: "Payment Processing",
    severity: "Medium",
    category: "Parameter Injection",
    description:
      "The Payment Processing tool does not properly validate input parameters, potentially allowing manipulation of payment amounts or recipients.",
    testCase: "Test-202",
    status: "Open",
  },
]

export default function VulnerabilityTable() {
  const [expandedRows, setExpandedRows] = useState<Record<string, boolean>>({})

  const toggleRow = (id: string) => {
    setExpandedRows((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead className="w-[30px]"></TableHead>
          <TableHead>Vulnerability</TableHead>
          <TableHead>Tool</TableHead>
          <TableHead>Severity</TableHead>
          <TableHead>Category</TableHead>
          <TableHead>Status</TableHead>
          <TableHead className="text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {vulnerabilities.map((vuln) => (
          <>
            <TableRow key={vuln.id}>
              <TableCell>
                <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => toggleRow(vuln.id)}>
                  {expandedRows[vuln.id] ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                </Button>
              </TableCell>
              <TableCell className="font-medium">{vuln.name}</TableCell>
              <TableCell>{vuln.tool}</TableCell>
              <TableCell>
                <Badge
                  variant="outline"
                  className={
                    vuln.severity === "Critical"
                      ? "border-red-500 text-red-500"
                      : vuln.severity === "High"
                        ? "border-orange-500 text-orange-500"
                        : "border-yellow-500 text-yellow-500"
                  }
                >
                  {vuln.severity}
                </Badge>
              </TableCell>
              <TableCell>{vuln.category}</TableCell>
              <TableCell>
                <Badge variant="secondary">{vuln.status}</Badge>
              </TableCell>
              <TableCell className="text-right">
                <Button variant="ghost" size="sm">
                  <ExternalLink className="h-4 w-4 mr-1" />
                  Details
                </Button>
              </TableCell>
            </TableRow>
            {expandedRows[vuln.id] && (
              <TableRow>
                <TableCell colSpan={7} className="bg-slate-50 dark:bg-slate-900">
                  <div className="p-4">
                    <h4 className="font-medium mb-2">Description</h4>
                    <p className="text-sm mb-4">{vuln.description}</p>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-medium mb-2">Test Case</h4>
                        <div className="text-sm p-3 bg-slate-100 rounded-md font-mono dark:bg-slate-800">
                          {vuln.testCase}
                        </div>
                      </div>
                      <div>
                        <h4 className="font-medium mb-2">Remediation</h4>
                        <ul className="text-sm list-disc pl-5 space-y-1">
                          <li>Implement proper input validation</li>
                          <li>Add context isolation mechanisms</li>
                          <li>Use parameterized interfaces</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </TableCell>
              </TableRow>
            )}
          </>
        ))}
      </TableBody>
    </Table>
  )
}
